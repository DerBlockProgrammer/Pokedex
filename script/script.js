// A: Array, um die Pok√©mon-Daten zu speichern, die von der API geladen werden.
let allPokemon = [];

// B: Die fetchDataJson-Funktion l√§dt Pok√©mon-Daten von der API und speichert sie in allPokemon.
async function fetchDataJson() {
   // A: Ladebalken anzeigen
   let loadingContainer = document.getElementById("loading-container");
   let loadingBar = document.getElementById("loading-bar");
   
   // Ladebalken sichtbar machen
   loadingContainer.style.display = "block";

   // Ladebalken f√ºr 3 Sekunden animieren
   setTimeout(() => {
       loadingContainer.style.display = "none";  // Ladebalken nach 3 Sekunden ausblenden
   }, 3000); // 3 Sekunden

    const typeIcons = {
        fire: 'üî•',
        water: 'üíß',
        grass: 'üåø',
        rock: 'ü™®',
        electric: '‚ö°',
        poison: 'üíÄ',
        flying: 'ü™Ω',
        bug: 'üêû',
        normal: 'üòä'
    };
   

    // C: API-Abfrage, um eine Liste von 12 Pok√©mon zu erhalten.
    let response = await fetch("https://pokeapi.co/api/v2/pokemon?limit=18&offset=0");
    if (!response.ok) {
        throw new Error('Fehler beim Abrufen der Pok√©mon-Daten');
    }
    
    
    // D: Umwandeln der Antwort in ein JSON-Objekt, das weiterverarbeitet werden kann.
    let responseToJson = await response.json();
  
    // E: HTML-Element mit der ID 'content' wird geleert, um Platz f√ºr neue Pok√©mon-Daten zu schaffen.
    let content = document.getElementById("content");
    content.innerHTML = "";

    // F: Schleife, die √ºber alle Pok√©mon-Ergebnisse iteriert und die Details jedes Pok√©mon abruft.
    for (let i = 0; i < responseToJson.results.length; i++) {
        let responseData = await fetch(responseToJson.results[i].url);
        let responseDataJson = await responseData.json();
        let sprite = responseDataJson.sprites.front_default;
        let pokeElement = responseDataJson.types.map((type) => type.type.name);
        
        // G: Erstellen einer Textdarstellung f√ºr die Pok√©mon-Typen mit Icons.
        let typesWithIcons = pokeElement.map(
            (type) => `${type.charAt(0).toUpperCase() + type.slice(1)} ${typeIcons[type] || '‚ùì'}`
        ).join(', ');

        // H: Speichern jedes Pok√©mon im allPokemon Array f√ºr sp√§teres Filtern.
        allPokemon.push({
            name: responseToJson.results[i].name,
            sprite: sprite,
            types: pokeElement, // Speichern der Typen als Array f√ºr das Filtern
            typesWithIcons: typesWithIcons,
            stats: responseDataJson.stats
        });

        // I: Dynamisch generierter HTML-Inhalt f√ºr jedes Pok√©mon, einschlie√ülich Vorder- und R√ºckseite der Karte.
        content.innerHTML += `
        <div class="cardContainer" onclick="flipCard(this)">
            <div class="cards">
                <div class="front">
                    <div class="nameBox">${responseToJson.results[i].name.charAt(0).toUpperCase() + responseToJson.results[i].name.slice(1)}</div>
                    <img class="pokemonImages" src="${sprite}">
                    <div>${typesWithIcons}</div>
                </div>
                <div class="back">
                    <h3>Statistiken</h3>
                    <p>HP: ${responseDataJson.stats[0].base_stat}</p>
                    <p>Angriff: ${responseDataJson.stats[1].base_stat}</p>
                    <p>Verteidigung: ${responseDataJson.stats[2].base_stat}</p>
                    <p>Spezial-Angriff: ${responseDataJson.stats[3].base_stat}</p>
                    <p>Spezial-Verteidigung: ${responseDataJson.stats[4].base_stat}</p>
                    <p>Geschwindigkeit: ${responseDataJson.stats[5].base_stat}</p>
                </div>
            </div>
        </div>`;
    }
    
}


// J: Neue Funktion zum Filtern der Pok√©mon nach Typen (Elementen)
function filterPokemon() {
    const searchInput = document.getElementById('search').value.toLowerCase();
    let content = document.getElementById("content");
    content.innerHTML = ""; // K: Inhalt leeren, um die gefilterten Ergebnisse anzuzeigen

   

    // L: Durchlaufen des allPokemon Arrays mit einer for-Schleife, um nach Typen zu filtern.
    for (let i = 0; i < allPokemon.length; i++) {
        // M: √úberpr√ºfen, ob das Pok√©mon den eingegebenen Typen enth√§lt
        if (allPokemon[i].types.includes(searchInput)) {
            foundPokemon = true;
            content.innerHTML += `
            <div class="cardContainer" onclick="flipCard(this)">
                <div class="cards">
                    <div class="front">
                        <div class="nameBox">${allPokemon[i].name.charAt(0).toUpperCase() + allPokemon[i].name.slice(1)}</div>
                        <img class="pokemonImages" src="${allPokemon[i].sprite}">
                        <div>${allPokemon[i].typesWithIcons}</div>
                    </div>
                    <div class="back">
                        <h3>Statistiken</h3>
                        <p>HP: ${allPokemon[i].stats[0].base_stat}</p>
                        <p>Angriff: ${allPokemon[i].stats[1].base_stat}</p>
                        <p>Verteidigung: ${allPokemon[i].stats[2].base_stat}</p>
                        <p>Spezial-Angriff: ${allPokemon[i].stats[3].base_stat}</p>
                        <p>Spezial-Verteidigung: ${allPokemon[i].stats[4].base_stat}</p>
                        <p>Geschwindigkeit: ${allPokemon[i].stats[5].base_stat}</p>
                    </div>
                </div>
            </div>`;
        }
    }

    // N: Wenn kein Pok√©mon gefunden wurde, wird eine Nachricht angezeigt.
    if (!foundPokemon) {
        content.innerHTML = "<p>No Pok√©mon found with that type.</p>";
    }
    
}

// O: Funktion zum Anzeigen von detaillierten Pok√©mon-Informationen in einem Popup.
function showDetails(pokemonData) {
    const popup = document.getElementById("pokemon-details-popup");
    const nameElement = document.getElementById("popup-pokemon-name");
    const imageElement = document.getElementById("popup-pokemon-image");
    const statsElement = document.getElementById("popup-pokemon-stats");

    nameElement.textContent = pokemonData.name;
    imageElement.src = pokemonData.sprite;
    statsElement.innerHTML = `
        <p>HP: ${pokemonData.hp}</p>
        <p>Angriff: ${pokemonData.attack}</p>
        <p>Verteidigung: ${pokemonData.defense}</p>
        <p>Spezial-Angriff: ${pokemonData.specialAttack}</p>
        <p>Spezial-Verteidigung: ${pokemonData.specialDefense}</p>
        <p>Geschwindigkeit: ${pokemonData.speed}</p>
    `;

    // P: Das Popup wird sichtbar gemacht.
    popup.style.display = "flex";
}

// Q: Funktion zum Schlie√üen des Popups.
function closePopup() {
    document.getElementById("pokemon-details-popup").style.display = "none";
}

// R: Funktion, die eine Karte umdreht, wenn sie angeklickt wird.
function flipCard(cardElement) {
    cardElement.classList.toggle('flipped');
}



// A: Initialisiert das Array allPokemon, das alle geladenen Pok√©mon speichert.

// B: Die Funktion fetchDataJson l√§dt Pok√©mon-Daten von der API und speichert diese im allPokemon-Array.

// C: Die API wird aufgerufen, um 12 Pok√©mon-Daten zu erhalten.

// D: Die API-Antwort wird in ein JSON-Format umgewandelt.

// E: Der vorhandene HTML-Inhalt wird gel√∂scht, bevor neue Daten hinzugef√ºgt werden.

// F: Eine Schleife durchl√§uft alle Pok√©mon und holt die Details ab.

// G: Erstellt eine Textdarstellung f√ºr die Typen des Pok√©mon mit Icons.

// H: Speichert die geladenen Pok√©mon in allPokemon f√ºr das sp√§tere Filtern.

// I: F√ºgt die Pok√©mon als HTML-Elemente in den Inhalt ein.

// J: Funktion zum Filtern der Pok√©mon basierend auf ihrem Typ (Element).

// K: Leert den Inhalt, bevor die gefilterten Ergebnisse angezeigt werden.

// L: Durchl√§uft das allPokemon-Array, um nach passenden Typen zu suchen.

// M: √úberpr√ºft, ob das Pok√©mon den gesuchten Typ (Element) enth√§lt.

// N: Zeigt eine Nachricht an, falls kein Pok√©mon mit dem gesuchten Typ gefunden wurde.

// O: Zeigt detaillierte Informationen zu einem Pok√©mon in einem Popup an.

// P: Macht das Popup sichtbar.

// Q: Schlie√üt das Popup, wenn der Benutzer auf "Schlie√üen" klickt.

// R: Dreht die Karte um, wenn sie angeklickt wird.